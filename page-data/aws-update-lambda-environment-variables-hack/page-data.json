{"componentChunkName":"component---src-templates-blog-template-js","path":"/aws-update-lambda-environment-variables-hack","result":{"data":{"markdownRemark":{"html":"<p>Sometimes we need to save/update environment variables, suppose you have a small set of data and you do not want to save it on external services like S3, DynamoDB</p>\n<p>And you might think create a code likes this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  process.env[&quot;my_var_1&quot;] = &quot;something&quot;;\n  process.env[&quot;my_var_2&quot;] = &quot;something_different&quot;;</code></pre></div>\n<p>But each time you run AWS lambda, it will create an isolated environments so you can not set environment variables likes the example above.</p>\n<p>Fortunately, we can use AWS Lambda as a mini database. I have used it for very long time ago and I want to share it here for fun and profit because as you know AWS Lambda is pretty dirty cheap. The hacky way is we can use Lambda update function configuration to update environment variable. Here is my example with Nodejs (you can use any language just Google Lambda update function configuration + your SDK):</p>\n<ol>\n<li>Create a lambda function with any name that you like for example: test-update-env</li>\n<li>Paste the code below to your function:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> lambda <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>Lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    FunctionName<span class=\"token operator\">:</span> <span class=\"token string\">'test-update-env'</span><span class=\"token punctuation\">,</span>\n    Environment<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      Variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">MY_VAR_1</span><span class=\"token operator\">:</span> <span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Set process.env.MY_VAR_1 = 'Foo'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">await</span> lambda<span class=\"token punctuation\">.</span><span class=\"token function\">updateFunctionConfiguration</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Update env successfully!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>Now run this function and press F5 and you can see the function now has environment variable <code class=\"language-text\">MY_VAR_1</code> with value: <code class=\"language-text\">Foo</code></li>\n<li>Modify the code a bit:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> lambda <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>Lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    FunctionName<span class=\"token operator\">:</span> <span class=\"token string\">'test-update-env'</span><span class=\"token punctuation\">,</span>\n    Environment<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      Variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">MY_VAR_1</span><span class=\"token operator\">:</span> <span class=\"token string\">'New Foo'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// update process.env.MY_VAR_1 = 'New Foo'</span>\n        <span class=\"token constant\">MY_VAR_2</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bar'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Set process.env.MY_VAR_2 = 'Bar'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">await</span> lambda<span class=\"token punctuation\">.</span><span class=\"token function\">updateFunctionConfiguration</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Update env successfully!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"5\">\n<li>Now run this again and you can see the function now has updated environment variable <code class=\"language-text\">MY_VAR_1</code> with a new value: <code class=\"language-text\">New foo</code> and new environment variable <code class=\"language-text\">MY_VAR_2</code> with value: <code class=\"language-text\">Bar</code></li>\n</ol>\n<p>Now you get the idea, you can get any value likes token from API call, calendar/booking data, ... and set/update it to environment variables.</p>\n<p>Note: AWS Lambda environment variable has 4Kb limit, it means if you use normal English characters we can store 4000 characters (not so bad at all). See detail <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html\">here</a>!</p>\n<p>You can use my tool here for counting bytes online: <a href=\"https://minitool.github.io/countbytesonline/\">https://minitool.github.io/countbytesonline/</a></p>\n<p>In the next article I will share a post about using Lambda as a real database so we do not need to worry about the limitation above.</p>\n<p>Please share this article and comment if you like the article!</p>","frontmatter":{"date":"October 20, 2020","slug":"aws-update-lambda-environment-variables-hack","title":"Using AWS Lambda as a (mini) database - Part 1: update Lambda environment variables hack"}}},"pageContext":{"slug":"aws-update-lambda-environment-variables-hack"}},"staticQueryHashes":[]}